/* Generated By:JavaCC: Do not edit this line. ConstrASTConstants.java */
package c_ast_desc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ConstrASTConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteDecimal = 4;
  /** RegularExpression Id. */
  int parteExp = 5;
  /** RegularExpression Id. */
  int separador = 8;
  /** RegularExpression Id. */
  int integer = 9;
  /** RegularExpression Id. */
  int real = 10;
  /** RegularExpression Id. */
  int bool = 11;
  /** RegularExpression Id. */
  int numEnt = 12;
  /** RegularExpression Id. */
  int numReal = 13;
  /** RegularExpression Id. */
  int booleans = 14;
  /** RegularExpression Id. */
  int asignacion = 15;
  /** RegularExpression Id. */
  int puntocoma = 16;
  /** RegularExpression Id. */
  int parAbierto = 17;
  /** RegularExpression Id. */
  int parCerrado = 18;
  /** RegularExpression Id. */
  int suma = 19;
  /** RegularExpression Id. */
  int resta = 20;
  /** RegularExpression Id. */
  int div = 21;
  /** RegularExpression Id. */
  int mult = 22;
  /** RegularExpression Id. */
  int and = 23;
  /** RegularExpression Id. */
  int or = 24;
  /** RegularExpression Id. */
  int not = 25;
  /** RegularExpression Id. */
  int mayor = 26;
  /** RegularExpression Id. */
  int menor = 27;
  /** RegularExpression Id. */
  int mayorIgual = 28;
  /** RegularExpression Id. */
  int menorIgual = 29;
  /** RegularExpression Id. */
  int igual = 30;
  /** RegularExpression Id. */
  int diferente = 31;
  /** RegularExpression Id. */
  int porcentaje = 32;
  /** RegularExpression Id. */
  int corcheteAbierto = 33;
  /** RegularExpression Id. */
  int corcheteCerrado = 34;
  /** RegularExpression Id. */
  int llaveAbierta = 35;
  /** RegularExpression Id. */
  int llaveCerrada = 36;
  /** RegularExpression Id. */
  int punto = 37;
  /** RegularExpression Id. */
  int flecha = 38;
  /** RegularExpression Id. */
  int coma = 39;
  /** RegularExpression Id. */
  int ampersand = 40;
  /** RegularExpression Id. */
  int string = 41;
  /** RegularExpression Id. */
  int tnull = 42;
  /** RegularExpression Id. */
  int proc = 43;
  /** RegularExpression Id. */
  int tif = 44;
  /** RegularExpression Id. */
  int then = 45;
  /** RegularExpression Id. */
  int telse = 46;
  /** RegularExpression Id. */
  int endif = 47;
  /** RegularExpression Id. */
  int twhile = 48;
  /** RegularExpression Id. */
  int tdo = 49;
  /** RegularExpression Id. */
  int endwhile = 50;
  /** RegularExpression Id. */
  int call = 51;
  /** RegularExpression Id. */
  int record = 52;
  /** RegularExpression Id. */
  int array = 53;
  /** RegularExpression Id. */
  int of = 54;
  /** RegularExpression Id. */
  int pointer = 55;
  /** RegularExpression Id. */
  int tnew = 56;
  /** RegularExpression Id. */
  int delete = 57;
  /** RegularExpression Id. */
  int read = 58;
  /** RegularExpression Id. */
  int write = 59;
  /** RegularExpression Id. */
  int nl = 60;
  /** RegularExpression Id. */
  int var = 61;
  /** RegularExpression Id. */
  int type = 62;
  /** RegularExpression Id. */
  int cadena = 63;
  /** RegularExpression Id. */
  int identificador = 64;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<parteDecimal>",
    "<parteExp>",
    "<token of kind 6>",
    "<token of kind 7>",
    "\"&&\"",
    "\"int\"",
    "\"real\"",
    "\"bool\"",
    "<numEnt>",
    "<numReal>",
    "<booleans>",
    "\"=\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"%\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\"->\"",
    "\",\"",
    "\"&\"",
    "\"string\"",
    "\"null\"",
    "\"proc\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"endif\"",
    "\"while\"",
    "\"do\"",
    "\"endwhile\"",
    "\"call\"",
    "\"record\"",
    "\"array\"",
    "\"of\"",
    "\"pointer\"",
    "\"new\"",
    "\"delete\"",
    "\"read\"",
    "\"write\"",
    "\"nl\"",
    "\"var\"",
    "\"type\"",
    "<cadena>",
    "<identificador>",
  };

}
