
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat May 07 17:11:58 CEST 2022
//----------------------------------------------------

package c_ast_asc;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import semOps.SemOps;
import asint.AnalizadorSintacticoTiny.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat May 07 17:11:58 CEST 2022
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\005\000\002\010\005\000\002" +
    "\011\010\000\002\013\003\000\002\013\002\000\002\012" +
    "\005\000\002\012\003\000\002\014\004\000\002\014\005" +
    "\000\002\015\006\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\010\000\002\020\006\000\002\022\005\000\002\022\003" +
    "\000\002\023\004\000\002\021\004\000\002\024\005\000" +
    "\002\024\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\030\005\000\002\031\007\000" +
    "\002\031\011\000\002\025\003\000\002\025\002\000\002" +
    "\032\007\000\002\034\004\000\002\035\004\000\002\036" +
    "\004\000\002\033\004\000\002\027\007\000\002\037\003" +
    "\000\002\037\002\000\002\040\005\000\002\040\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\005" +
    "\000\002\043\003\000\002\044\005\000\002\044\003\000" +
    "\002\045\005\000\002\045\003\000\002\046\004\000\002" +
    "\046\004\000\002\046\003\000\002\047\006\000\002\047" +
    "\005\000\002\047\005\000\002\047\003\000\002\050\004" +
    "\000\002\050\003\000\002\051\003\000\002\051\005\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\056\004\ufffd\006\014\007\011\012\010\013" +
    "\ufffd\017\ufffd\034\ufffd\035\ufffd\046\ufffd\050\ufffd\051\ufffd" +
    "\053\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\001\002\000\006" +
    "\010\241\011\242\001\002\000\050\004\116\013\110\017" +
    "\063\034\106\035\074\046\067\050\107\051\077\053\120" +
    "\060\117\061\072\062\102\063\071\064\076\070\101\071" +
    "\073\072\112\073\114\074\103\001\002\000\004\002\001" +
    "\001\002\000\006\010\ufff8\011\ufff8\001\002\000\022\021" +
    "\017\022\027\023\021\024\026\025\023\026\025\027\030" +
    "\071\032\001\002\000\004\071\053\001\002\000\006\010" +
    "\ufffa\011\ufffa\001\002\000\004\002\052\001\002\000\022" +
    "\021\017\022\027\023\021\024\026\025\023\026\025\027" +
    "\030\071\032\001\002\000\006\010\ufff9\011\ufff9\001\002" +
    "\000\006\010\ufffb\011\ufffb\001\002\000\006\016\uffed\071" +
    "\uffed\001\002\000\004\071\051\001\002\000\006\016\uffeb" +
    "\071\uffeb\001\002\000\006\016\uffe7\071\uffe7\001\002\000" +
    "\004\030\044\001\002\000\006\016\uffe8\071\uffe8\001\002" +
    "\000\004\017\034\001\002\000\006\016\uffea\071\uffea\001" +
    "\002\000\006\016\uffec\071\uffec\001\002\000\022\021\017" +
    "\022\027\023\021\024\026\025\023\026\025\027\030\071" +
    "\032\001\002\000\006\016\uffe6\071\uffe6\001\002\000\006" +
    "\016\uffe9\071\uffe9\001\002\000\006\016\uffe0\071\uffe0\001" +
    "\002\000\022\021\017\022\027\023\021\024\026\025\023" +
    "\026\025\027\030\071\032\001\002\000\004\071\043\001" +
    "\002\000\006\011\041\020\040\001\002\000\006\011\uffe2" +
    "\020\uffe2\001\002\000\006\016\uffe4\071\uffe4\001\002\000" +
    "\022\021\017\022\027\023\021\024\026\025\023\026\025" +
    "\027\030\071\032\001\002\000\006\011\uffe3\020\uffe3\001" +
    "\002\000\006\011\uffe1\020\uffe1\001\002\000\004\072\045" +
    "\001\002\000\004\031\046\001\002\000\004\005\047\001" +
    "\002\000\022\021\017\022\027\023\021\024\026\025\023" +
    "\026\025\027\030\071\032\001\002\000\006\016\uffe5\071" +
    "\uffe5\001\002\000\006\010\ufff6\011\ufff6\001\002\000\004" +
    "\002\000\001\002\000\004\013\054\001\002\000\024\014" +
    "\ufff3\021\017\022\027\023\021\024\026\025\023\026\025" +
    "\027\030\071\032\001\002\000\006\016\233\071\234\001" +
    "\002\000\006\014\ufff1\015\ufff1\001\002\000\006\014\ufff4" +
    "\015\231\001\002\000\004\014\061\001\002\000\004\017" +
    "\063\001\002\000\006\010\ufff5\011\ufff5\001\002\000\056" +
    "\004\ufffd\006\014\007\011\012\010\013\ufffd\017\ufffd\034" +
    "\ufffd\035\ufffd\046\ufffd\050\ufffd\051\ufffd\053\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\070\ufffd\071\ufffd\072" +
    "\ufffd\073\ufffd\074\ufffd\001\002\000\050\004\116\013\110" +
    "\017\063\034\106\035\074\046\067\050\107\051\077\053" +
    "\120\060\117\061\072\062\102\063\071\064\076\070\101" +
    "\071\073\072\112\073\114\074\103\001\002\000\016\002" +
    "\uffdc\011\uffdc\020\uffdc\052\uffdc\054\uffdc\055\uffdc\001\002" +
    "\000\016\002\uffd9\011\uffd9\020\uffd9\052\uffd9\054\uffd9\055" +
    "\uffd9\001\002\000\022\013\110\046\067\050\107\070\101" +
    "\071\073\072\112\073\114\074\103\001\002\000\016\002" +
    "\uffd7\011\uffd7\020\uffd7\052\uffd7\054\uffd7\055\uffd7\001\002" +
    "\000\026\013\110\034\106\035\074\046\067\050\107\070" +
    "\101\071\073\072\112\073\114\074\103\001\002\000\026" +
    "\013\110\034\106\035\074\046\067\050\107\070\101\071" +
    "\073\072\112\073\114\074\103\001\002\000\072\002\uffc2" +
    "\011\uffc2\014\uffc2\015\uffc2\020\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\052" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\001\002\000\026\013\110\034\106\035\074\046" +
    "\067\050\107\070\101\071\073\072\112\073\114\074\103" +
    "\001\002\000\016\002\uffd5\011\uffd5\020\uffd5\052\uffd5\054" +
    "\uffd5\055\uffd5\001\002\000\004\071\215\001\002\000\026" +
    "\013\110\034\106\035\074\046\067\050\107\070\101\071" +
    "\073\072\112\073\114\074\103\001\002\000\016\002\uffde" +
    "\011\uffde\020\uffde\052\uffde\054\uffde\055\uffde\001\002\000" +
    "\072\002\uffc1\011\uffc1\014\uffc1\015\uffc1\020\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\065" +
    "\uffc1\066\uffc1\067\uffc1\001\002\000\026\013\110\034\106" +
    "\035\074\046\067\050\107\070\101\071\073\072\112\073" +
    "\114\074\103\001\002\000\072\002\uffc0\011\uffc0\014\uffc0" +
    "\015\uffc0\020\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\052\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002" +
    "\000\072\002\uffac\011\uffac\014\uffac\015\uffac\020\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\065\uffac\066\uffac\067\uffac\001\002\000\016\002\uffdb\011" +
    "\uffdb\020\uffdb\052\uffdb\054\uffdb\055\uffdb\001\002\000\022" +
    "\013\110\046\067\050\107\070\101\071\073\072\112\073" +
    "\114\074\103\001\002\000\072\002\uffbf\011\uffbf\014\uffbf" +
    "\015\uffbf\020\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\052\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002" +
    "\000\026\013\110\034\106\035\074\046\067\050\107\070" +
    "\101\071\073\072\112\073\114\074\103\001\002\000\006" +
    "\011\175\020\201\001\002\000\072\002\uffc4\011\uffc4\014" +
    "\uffc4\015\uffc4\020\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\052\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\065\uffc4\066\uffc4\067\uffc4\001" +
    "\002\000\016\002\uffda\011\uffda\020\uffda\052\uffda\054\uffda" +
    "\055\uffda\001\002\000\072\002\uffc3\011\uffc3\014\uffc3\015" +
    "\uffc3\020\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\052\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\065\uffc3\066\uffc3\067\uffc3\001\002\000" +
    "\016\002\uffd4\011\uffd4\020\uffd4\052\uffd4\054\uffd4\055\uffd4" +
    "\001\002\000\016\002\uffd8\011\uffd8\020\uffd8\052\uffd8\054" +
    "\uffd8\055\uffd8\001\002\000\026\013\110\034\106\035\074" +
    "\046\067\050\107\070\101\071\073\072\112\073\114\074" +
    "\103\001\002\000\026\013\110\034\106\035\074\046\067" +
    "\050\107\070\101\071\073\072\112\073\114\074\103\001" +
    "\002\000\016\002\uffd6\011\uffd6\020\uffd6\052\uffd6\054\uffd6" +
    "\055\uffd6\001\002\000\072\002\uffad\011\uffad\014\uffad\015" +
    "\uffad\020\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\052\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\065\uffad\066\uffad\067\uffad\001\002\000" +
    "\016\002\uffdd\011\uffdd\020\uffdd\052\uffdd\054\uffdd\055\uffdd" +
    "\001\002\000\072\002\uffaf\011\uffaf\014\uffaf\015\uffaf\020" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\065\uffaf\066\uffaf\067\uffaf\001\002\000\072\002" +
    "\uffb3\011\uffb3\014\uffb3\015\uffb3\020\uffb3\030\164\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\065\uffb3\066" +
    "\163\067\162\001\002\000\064\002\uffb6\011\uffb6\014\uffb6" +
    "\015\uffb6\020\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\155\047\157\052\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\065\156\001\002\000\056\002\uffb8\011\uffb8" +
    "\014\uffb8\015\uffb8\020\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\052\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\001\002\000\056\002\uffba\011\uffba\014\uffba\015\uffba" +
    "\020\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\uffba\037" +
    "\uffba\040\150\041\152\042\151\043\153\044\147\045\146" +
    "\052\uffba\054\uffba\055\uffba\056\uffba\057\uffba\001\002\000" +
    "\042\002\uffbc\011\uffbc\014\uffbc\015\uffbc\020\uffbc\031\uffbc" +
    "\032\uffbc\033\136\034\140\036\137\037\141\052\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000\004\032\133" +
    "\001\002\000\026\013\110\034\106\035\074\046\067\050" +
    "\107\070\101\071\073\072\112\073\114\074\103\001\002" +
    "\000\016\002\uffd3\011\uffd3\020\uffd3\052\uffd3\054\uffd3\055" +
    "\uffd3\001\002\000\026\013\110\034\106\035\074\046\067" +
    "\050\107\070\101\071\073\072\112\073\114\074\103\001" +
    "\002\000\026\013\110\034\106\035\074\046\067\050\107" +
    "\070\101\071\073\072\112\073\114\074\103\001\002\000" +
    "\026\013\uffaa\034\uffaa\035\uffaa\046\uffaa\050\uffaa\070\uffaa" +
    "\071\uffaa\072\uffaa\073\uffaa\074\uffaa\001\002\000\026\013" +
    "\110\034\106\035\074\046\067\050\107\070\101\071\073" +
    "\072\112\073\114\074\103\001\002\000\026\013\uffa9\034" +
    "\uffa9\035\uffa9\046\uffa9\050\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\001\002\000\036\002\uffbd\011\uffbd\014" +
    "\uffbd\015\uffbd\020\uffbd\031\uffbd\032\uffbd\036\137\037\141" +
    "\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\001\002\000" +
    "\032\002\uffbe\011\uffbe\014\uffbe\015\uffbe\020\uffbe\031\uffbe" +
    "\032\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\001" +
    "\002\000\056\002\uffbb\011\uffbb\014\uffbb\015\uffbb\020\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb\040" +
    "\150\041\152\042\151\043\153\044\147\045\146\052\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000\026\013" +
    "\110\034\106\035\074\046\067\050\107\070\101\071\073" +
    "\072\112\073\114\074\103\001\002\000\026\013\uffa3\034" +
    "\uffa3\035\uffa3\046\uffa3\050\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\073\uffa3\074\uffa3\001\002\000\026\013\uffa4\034\uffa4\035" +
    "\uffa4\046\uffa4\050\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\001\002\000\026\013\uffa8\034\uffa8\035\uffa8\046" +
    "\uffa8\050\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\001\002\000\026\013\uffa6\034\uffa6\035\uffa6\046\uffa6\050" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\001\002" +
    "\000\026\013\uffa7\034\uffa7\035\uffa7\046\uffa7\050\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\001\002\000\026" +
    "\013\uffa5\034\uffa5\035\uffa5\046\uffa5\050\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\001\002\000\056\002\uffb9" +
    "\011\uffb9\014\uffb9\015\uffb9\020\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\052\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\001\002\000\026\013\uffa2\034\uffa2\035\uffa2" +
    "\046\uffa2\050\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074" +
    "\uffa2\001\002\000\026\013\uffa0\034\uffa0\035\uffa0\046\uffa0" +
    "\050\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\001" +
    "\002\000\026\013\uffa1\034\uffa1\035\uffa1\046\uffa1\050\uffa1" +
    "\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\001\002\000" +
    "\026\013\110\034\106\035\074\046\067\050\107\070\101" +
    "\071\073\072\112\073\114\074\103\001\002\000\056\002" +
    "\uffb7\011\uffb7\014\uffb7\015\uffb7\020\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\052\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\001\002\000\004\071\170\001\002\000" +
    "\004\071\167\001\002\000\026\013\110\034\106\035\074" +
    "\046\067\050\107\070\101\071\073\072\112\073\114\074" +
    "\103\001\002\000\004\031\166\001\002\000\072\002\uffb2" +
    "\011\uffb2\014\uffb2\015\uffb2\020\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\052" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\065\uffb2\066\uffb2" +
    "\067\uffb2\001\002\000\072\002\uffb1\011\uffb1\014\uffb1\015" +
    "\uffb1\020\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\052\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\065\uffb1\066\uffb1\067\uffb1\001\002\000" +
    "\072\002\uffb0\011\uffb0\014\uffb0\015\uffb0\020\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\052\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\065" +
    "\uffb0\066\uffb0\067\uffb0\001\002\000\004\056\172\001\002" +
    "\000\052\004\116\013\110\017\063\034\106\035\074\046" +
    "\067\050\107\051\077\053\120\055\uffcf\060\117\061\072" +
    "\062\102\063\071\064\076\070\101\071\073\072\112\073" +
    "\114\074\103\001\002\000\004\055\177\001\002\000\012" +
    "\011\175\052\uffd0\054\uffd0\055\uffd0\001\002\000\050\004" +
    "\116\013\110\017\063\034\106\035\074\046\067\050\107" +
    "\051\077\053\120\060\117\061\072\062\102\063\071\064" +
    "\076\070\101\071\073\072\112\073\114\074\103\001\002" +
    "\000\016\002\uffdf\011\uffdf\020\uffdf\052\uffdf\054\uffdf\055" +
    "\uffdf\001\002\000\016\002\uffce\011\uffce\020\uffce\052\uffce" +
    "\054\uffce\055\uffce\001\002\000\016\002\uffcd\011\uffcd\020" +
    "\uffcd\052\uffcd\054\uffcd\055\uffcd\001\002\000\020\002\uffee" +
    "\010\uffee\011\uffee\020\uffee\052\uffee\054\uffee\055\uffee\001" +
    "\002\000\004\014\203\001\002\000\072\002\uffab\011\uffab" +
    "\014\uffab\015\uffab\020\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\052\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\065\uffab\066\uffab\067\uffab" +
    "\001\002\000\072\002\uffb4\011\uffb4\014\uffb4\015\uffb4\020" +
    "\uffb4\030\164\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\065\uffb4\066\163\067\162\001\002\000\016\002" +
    "\uffcb\011\uffcb\020\uffcb\052\uffcb\054\uffcb\055\uffcb\001\002" +
    "\000\004\057\207\001\002\000\054\004\116\013\110\017" +
    "\063\034\106\035\074\046\067\050\107\051\077\052\uffcf" +
    "\053\120\054\uffcf\060\117\061\072\062\102\063\071\064" +
    "\076\070\101\071\073\072\112\073\114\074\103\001\002" +
    "\000\006\052\211\054\212\001\002\000\052\004\116\013" +
    "\110\017\063\034\106\035\074\046\067\050\107\051\077" +
    "\053\120\054\uffcf\060\117\061\072\062\102\063\071\064" +
    "\076\070\101\071\073\072\112\073\114\074\103\001\002" +
    "\000\016\002\uffd2\011\uffd2\020\uffd2\052\uffd2\054\uffd2\055" +
    "\uffd2\001\002\000\004\054\214\001\002\000\016\002\uffd1" +
    "\011\uffd1\020\uffd1\052\uffd1\054\uffd1\055\uffd1\001\002\000" +
    "\004\013\216\001\002\000\030\013\110\014\uffc7\034\106" +
    "\035\074\046\067\050\107\070\101\071\073\072\112\073" +
    "\114\074\103\001\002\000\006\014\uffc8\015\223\001\002" +
    "\000\006\014\uffc5\015\uffc5\001\002\000\004\014\222\001" +
    "\002\000\016\002\uffc9\011\uffc9\020\uffc9\052\uffc9\054\uffc9" +
    "\055\uffc9\001\002\000\026\013\110\034\106\035\074\046" +
    "\067\050\107\070\101\071\073\072\112\073\114\074\103" +
    "\001\002\000\006\014\uffc6\015\uffc6\001\002\000\064\002" +
    "\uffb5\011\uffb5\014\uffb5\015\uffb5\020\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\052\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\065\uffb5\001\002\000" +
    "\016\002\uffcc\011\uffcc\020\uffcc\052\uffcc\054\uffcc\055\uffcc" +
    "\001\002\000\016\002\uffca\011\uffca\020\uffca\052\uffca\054" +
    "\uffca\055\uffca\001\002\000\072\002\uffae\011\uffae\014\uffae" +
    "\015\uffae\020\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\052\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\065\uffae\066\uffae\067\uffae\001\002" +
    "\000\022\021\017\022\027\023\021\024\026\025\023\026" +
    "\025\027\030\071\032\001\002\000\006\014\ufff2\015\ufff2" +
    "\001\002\000\004\071\235\001\002\000\006\014\ufff0\015" +
    "\ufff0\001\002\000\006\014\uffef\015\uffef\001\002\000\004" +
    "\071\237\001\002\000\006\010\ufff7\011\ufff7\001\002\000" +
    "\006\002\uffff\011\175\001\002\000\050\004\ufffe\013\ufffe" +
    "\017\ufffe\034\ufffe\035\ufffe\046\ufffe\050\ufffe\051\ufffe\053" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\070\ufffe" +
    "\071\ufffe\072\ufffe\073\ufffe\074\ufffe\001\002\000\010\006" +
    "\014\007\011\012\010\001\002\000\006\010\ufffc\011\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\022\002\012\003\005\004\004\005\003\006" +
    "\015\007\011\010\014\011\006\001\001\000\002\001\001" +
    "\000\052\015\114\024\237\026\077\027\074\030\122\031" +
    "\064\032\104\033\120\034\112\035\065\036\067\041\103" +
    "\042\131\043\130\044\127\045\126\046\125\047\124\050" +
    "\123\051\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\235\017\023\020\021\021\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\017\017\023\020\021\021\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\032\017\023\020\021\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\034\017\023\020\021\021\030\022\035\023" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\034\017\023\020" +
    "\021\021\030\023\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\047\017\023\020\021\021\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\056\013\057\014\055\016\054" +
    "\017\023\020\021\021\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\061\001\001\000\002\001\001\000\016\004\063\005" +
    "\003\006\015\007\011\010\014\011\006\001\001\000\052" +
    "\015\114\024\110\026\077\027\074\030\122\031\064\032" +
    "\104\033\120\034\112\035\065\036\067\041\103\042\131" +
    "\043\130\044\127\045\126\046\125\047\124\050\123\051" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\041\103\050\227\051\121\001\001\000\002\001\001\000" +
    "\024\041\103\042\226\043\130\044\127\045\126\046\125" +
    "\047\124\050\123\051\121\001\001\000\024\041\103\042" +
    "\225\043\130\044\127\045\126\046\125\047\124\050\123" +
    "\051\121\001\001\000\002\001\001\000\014\041\103\046" +
    "\224\047\124\050\123\051\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\041\103\042\205\043\130\044" +
    "\127\045\126\046\125\047\124\050\123\051\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\041\103\042" +
    "\204\043\130\044\127\045\126\046\125\047\124\050\123" +
    "\051\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\041\103\047\203\050\123\051\121" +
    "\001\001\000\002\001\001\000\024\041\103\042\201\043" +
    "\130\044\127\045\126\046\125\047\124\050\123\051\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\041\103\042\177\043\130\044\127\045\126\046" +
    "\125\047\124\050\123\051\121\001\001\000\024\041\103" +
    "\042\170\043\130\044\127\045\126\046\125\047\124\050" +
    "\123\051\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\157\001\001\000\002\001\001\000\004\053\144" +
    "\001\001\000\004\052\134\001\001\000\002\001\001\000" +
    "\024\041\103\042\133\043\130\044\127\045\126\046\125" +
    "\047\124\050\123\051\121\001\001\000\002\001\001\000" +
    "\020\041\103\044\143\045\126\046\125\047\124\050\123" +
    "\051\121\001\001\000\024\041\103\042\142\043\130\044" +
    "\127\045\126\046\125\047\124\050\123\051\121\001\001" +
    "\000\002\001\001\000\022\041\103\043\141\044\127\045" +
    "\126\046\125\047\124\050\123\051\121\001\001\000\002" +
    "\001\001\000\004\052\134\001\001\000\002\001\001\000" +
    "\004\053\144\001\001\000\016\041\103\045\153\046\125" +
    "\047\124\050\123\051\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\041\103" +
    "\046\160\047\124\050\123\051\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\041\103" +
    "\042\164\043\130\044\127\045\126\046\125\047\124\050" +
    "\123\051\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\015\114\024\173\025\172\026\077\027\074\030\122" +
    "\031\064\032\104\033\120\034\112\035\065\036\067\041" +
    "\103\042\131\043\130\044\127\045\126\046\125\047\124" +
    "\050\123\051\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\015\114\026\175\027\074\030\122\031\064" +
    "\032\104\033\120\034\112\035\065\036\067\041\103\042" +
    "\131\043\130\044\127\045\126\046\125\047\124\050\123" +
    "\051\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\015\114\024\173\025\207\026\077\027\074" +
    "\030\122\031\064\032\104\033\120\034\112\035\065\036" +
    "\067\041\103\042\131\043\130\044\127\045\126\046\125" +
    "\047\124\050\123\051\121\001\001\000\002\001\001\000" +
    "\054\015\114\024\173\025\212\026\077\027\074\030\122" +
    "\031\064\032\104\033\120\034\112\035\065\036\067\041" +
    "\103\042\131\043\130\044\127\045\126\046\125\047\124" +
    "\050\123\051\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\037\220" +
    "\040\216\041\103\042\217\043\130\044\127\045\126\046" +
    "\125\047\124\050\123\051\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\041\103\042\223\043\130\044\127\045\126\046\125" +
    "\047\124\050\123\051\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\231\016\054\017\023\020\021\021" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\242" +
    "\007\011\010\014\011\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // SAux ::= S 
            {
              Prog RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = prog; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SAux",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= SAux EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= SecDec SecInstr 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog(decs,instrs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("S",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SecDec ::= Declaraciones SEPARADOR 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = decs; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SecDec",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SecDec ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.decs_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SecDec",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaraciones ::= Declaraciones PUNTOCOMA Declaracion 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(decs, dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaraciones",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaraciones ::= Declaracion 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaraciones",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= DeclaracionVar 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= DeclaracionTipo 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaracion ::= DeclaracionProc 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Declaracion",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionVar ::= VAR Tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_var(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclaracionTipo ::= TYPE Tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_tipo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DeclaracionTipo",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DeclaracionProc ::= PROC IDENTIFICADOR PAR_ABIERTO ParametrosFormales PAR_CERRADO Bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		ParamsForm params = (ParamsForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_proc(id, params, bloque); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DeclaracionProc",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ParametrosFormales ::= ParametrosFormalesAux 
            {
              ParamsForm RESULT =null;
		ParamsForm params = (ParamsForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = params; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParametrosFormales ::= 
            {
              ParamsForm RESULT =null;
		 RESULT = sem.paramsForm_vacio(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ParametrosFormalesAux ::= ParametrosFormalesAux COMA Parametro 
            {
              ParamsForm RESULT =null;
		ParamsForm params = (ParamsForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.paramsForm_muchos(params, param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosFormalesAux",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParametrosFormalesAux ::= Parametro 
            {
              ParamsForm RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.paramsForm_uno(param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosFormalesAux",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parametro ::= Tipo IDENTIFICADOR 
            {
              Param RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_sin_amp(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Parametro ::= Tipo AMPERSAND IDENTIFICADOR 
            {
              Param RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_con_amp(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Bloque ::= LLAVE_ABIERTA SecDec SecInstr LLAVE_CERRADA 
            {
              Bloque RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.bloque(decs, instrs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Bloque",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoInt(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoReal(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoBool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipoString(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoId(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= Array 
            {
              Tipo RESULT =null;
		Tipo array = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = array; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= Registro 
            {
              Tipo RESULT =null;
		Tipo registro = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = registro; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= Puntero 
            {
              Tipo RESULT =null;
		Tipo puntero = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = puntero; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Array ::= ARRAY CORCHETE_ABIERTO NUM_ENT CORCHETE_CERRADO OF Tipo 
            {
              Tipo RESULT =null;
		StringLocalizado tam = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoArray(tam, tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Array",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Registro ::= RECORD LLAVE_ABIERTA Campos LLAVE_CERRADA 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipoRegistro(campos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Registro",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Campos ::= Campos PUNTOCOMA Campo 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_muchos(campos, campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Campos ::= Campo 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_uno(campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campos",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Campo ::= Tipo IDENTIFICADOR 
            {
              Campo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campo",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Puntero ::= POINTER Tipo 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoPuntero(tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Puntero",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SecInstr ::= SecInstr PUNTOCOMA Instruccion 
            {
              Instrs RESULT =null;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_muchas(instrs, instr); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SecInstr",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SecInstr ::= Instruccion 
            {
              Instrs RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instr_una(instr); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SecInstr",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= InstruccionAsignacion 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= InstruccionIf 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InstruccionWhile 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= InstruccionRead 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= InstruccionWrite 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= NL 
            {
              Instr RESULT =null;
		 RESULT = sem.instruccionNL(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion ::= InstruccionNew 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion ::= InstruccionDelete 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion ::= InstruccionCall 
            {
              Instr RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruccion ::= Bloque 
            {
              Instr RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instruccionBloque(bloque); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Instruccion",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InstruccionAsignacion ::= E0 ASIGNACION E0 
            {
              Instr RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instruccionAsig(arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionAsignacion",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InstruccionIf ::= IF E0 THEN SecInstr2 ENDIF 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.instruccionIf(exp, instrs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionIf",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InstruccionIf ::= IF E0 THEN SecInstr2 ELSE SecInstr2 ENDIF 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)).value;
		Instrs instrs_if = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Instrs instrs_else = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.instruccionIfElse(exp, instrs_if, instrs_else); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionIf",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SecInstr2 ::= SecInstr 
            {
              Instrs RESULT =null;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = instrs; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SecInstr2",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SecInstr2 ::= 
            {
              Instrs RESULT =null;
		 RESULT = sem.instr_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SecInstr2",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InstruccionWhile ::= WHILE E0 DO SecInstr2 ENDWHILE 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.instruccionWhile(exp, instrs); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionWhile",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InstruccionRead ::= READ E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instruccionRead(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionRead",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstruccionWrite ::= WRITE E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instruccionWrite(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionWrite",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InstruccionNew ::= NEW E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instruccionNew(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionNew",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InstruccionDelete ::= DELETE E0 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.instruccionDelete(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionDelete",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InstruccionCall ::= CALL IDENTIFICADOR PAR_ABIERTO ParametrosReales PAR_CERRADO 
            {
              Instr RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		ParamReales params = (ParamReales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.instruccionCall(id, params); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("InstruccionCall",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ParametrosReales ::= ParametrosRealesAux 
            {
              ParamReales RESULT =null;
		ParamReales arg = (ParamReales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosReales",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ParametrosReales ::= 
            {
              ParamReales RESULT =null;
		 RESULT = sem.paramReales_vacios(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosReales",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ParametrosRealesAux ::= ParametrosRealesAux COMA E0 
            {
              ParamReales RESULT =null;
		ParamReales args = (ParamReales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.paramReales_muchos(arg,args); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosRealesAux",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ParametrosRealesAux ::= E0 
            {
              ParamReales RESULT =null;
		Exp arg = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.paramReales_uno(arg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParametrosRealesAux",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpresionBasica ::= NUM_ENT 
            {
              Exp RESULT =null;
		StringLocalizado arg = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.num_ent(arg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpresionBasica ::= NUM_REAL 
            {
              Exp RESULT =null;
		StringLocalizado arg = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.num_real(arg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpresionBasica ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		StringLocalizado arg = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.id(arg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpresionBasica ::= BOOLEAN 
            {
              Exp RESULT =null;
		StringLocalizado arg = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.booleano(arg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpresionBasica ::= CADENA 
            {
              Exp RESULT =null;
		StringLocalizado arg = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.cadena(arg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpresionBasica ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.nulo(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E1 MAS E0 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.mas(arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= E1 MENOS E1 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.menos(arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E1 Op1 E2 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op1, arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E2 Op2 E3 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op2, arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= E4 Op3 E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op3, arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",35, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",35, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.not(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= MENOS E5 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.negativo(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",36, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= E5 CORCHETE_ABIERTO E0 CORCHETE_CERRADO 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.indexacion(arg0, arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E5 ::= E5 PUNTO IDENTIFICADOR 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.acceso_registro_punto(arg0, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E5 ::= E5 FLECHA IDENTIFICADOR 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.acceso_registro_flecha(arg0, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",37, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E6 ::= MULT E6 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.asterisco(arg0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",38, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E7 ::= ExpresionBasica 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E7 ::= PAR_ABIERTO E0 PAR_CERRADO 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = arg0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",39, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Op1 ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op1",40, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Op1 ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op1",40, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Op2 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "menor"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Op2 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = "mayor"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Op2 ::= MENOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = "menor_igual"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Op2 ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = "mayor_igual"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Op2 ::= DIFERENTE 
            {
              String RESULT =null;
		 RESULT = "diferente"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Op2 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "igual"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Op3 ::= MULT 
            {
              String RESULT =null;
		 RESULT = "mult"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",42, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Op3 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "div"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",42, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Op3 ::= PORCENTAJE 
            {
              String RESULT =null;
		 RESULT = "porcentaje"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Op3",42, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

