package asint;

import asint.AnalizadorSintacticoTiny.*;
import asint.AnalizadorSintacticoTiny.Boolean;


public interface Procesamiento {
    void procesa(Prog prog);
    void procesa(Decs_muchas decs_muchas);
    void procesa(Decs_una decs_una);
    void procesa(Decs_vacia decs_vacia);
    void procesa(Dec_var dec_var);
    void procesa(Dec_tipo dec_tipo);
    void procesa(Dec_proc dec_proc);
    void procesa(ParamsForm_muchos paramsForm_muchos);
    void procesa(ParamsForm_uno paramsForm_uno);
    void procesa(ParamsForm_vacio paramsForm_vacio);
    void procesa(Param_sin_amp param_sin_amp);
    void procesa(Param_con_amp param_con_amp);
    void procesa(Bloque bloque);
    void procesa(Int tInt);
    void procesa(Real real);
    void procesa(Bool bool);
    void procesa(TString tString);
    void procesa(TipoId tipoId);
    void procesa(TipoArray tipoArray);
    void procesa(TipoRegistro tipoRegistro);
    void procesa(TipoPuntero tipoPuntero);
    void procesa(Campos_muchos campos_muchos);
    void procesa(Campos_uno campos_uno);
    void procesa(Campo campo);
    void procesa(Instr_muchas instr_muchas);
    void procesa(Instr_una instr_una);
    void procesa(Instr_vacia instr_vacia);
    void procesa(InstruccionAsig instruccionAsig);
    void procesa(InstruccionIf instruccionIf);
    void procesa(InstruccionIfElse instruccionIfElse);
    void procesa(InstruccionWhile instruccionWhile);
    void procesa(InstruccionRead instruccionRead);
    void procesa(InstruccionWrite instruccionWrite);
    void procesa(InstruccionNew instruccionNew);
    void procesa(InstruccionDelete instrs);
    void procesa(InstruccionCall instrs);
    void procesa(InstruccionBloque instrs);
	void procesa(InstruccionNL instrs);
    void procesa(ParamReales_muchos params);
    void procesa(ParamReales_uno params);
    void procesa(ParamReales_vacios params);
    void procesa(Num_ent exp);   
    void procesa(Num_real exp);  
    void procesa(Id exp);
    void procesa(Boolean exp);
    void procesa(Cadena exp);
    void procesa(Null exp);
    void procesa(Mas exp);  
    void procesa(Menos exp);
    void procesa(And exp);
    void procesa(Or exp);  
    void procesa(Menor exp);
    void procesa(Mayor exp);
    void procesa(Menor_igual exp);  
    void procesa(Mayor_igual exp);  
    void procesa(Diferente exp);  
    void procesa(Igual exp);  
    void procesa(Mult exp);  
    void procesa(Asterisco asterisco);
    void procesa(Div exp); 
    void procesa(Porcentaje exp);
    void procesa(Not exp);  
    void procesa(Negativo exp);  
    void procesa(Indexacion indexacion);
    void procesa(Acceso_registro_punto acceso_registro);
    void procesa(Acceso_registro_flecha acceso_registro);
}