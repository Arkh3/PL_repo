/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {

  final public void Sp() throws ParseException {
    S();
    jj_consume_token(0);
  }

  final public void S() throws ParseException {
    SecDec();
    SecInstr();
  }

  final public void SecDec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case proc:
    case var:
    case type:
      Declaraciones();
      jj_consume_token(separador);
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void Declaraciones() throws ParseException {
    Declaracion();
    DeclaracionesAux();
  }

  final public void DeclaracionesAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case puntocoma:
      jj_consume_token(puntocoma);
      Declaracion();
      DeclaracionesAux();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void Declaracion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
      DeclaracionVar();
      break;
    case type:
      DeclaracionTipo();
      break;
    case proc:
      DeclaracionProc();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DeclaracionVar() throws ParseException {
    jj_consume_token(var);
    Tipo();
    jj_consume_token(identificador);
  }

  final public void DeclaracionTipo() throws ParseException {
    jj_consume_token(type);
    Tipo();
    jj_consume_token(identificador);
  }

  final public void DeclaracionProc() throws ParseException {
    jj_consume_token(proc);
    jj_consume_token(identificador);
    jj_consume_token(parAbierto);
    ParametrosFormales();
    jj_consume_token(parCerrado);
    Bloque();
  }

  final public void ParametrosFormales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case integer:
    case real:
    case bool:
    case string:
    case record:
    case array:
    case pointer:
    case identificador:
      Parametro();
      ParametrosFormalesAux();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void ParametrosFormalesAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case coma:
      jj_consume_token(coma);
      Parametro();
      ParametrosFormalesAux();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void Parametro() throws ParseException {
    Tipo();
    ParametroAux();
  }

  final public void ParametroAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case identificador:
      jj_consume_token(identificador);
      break;
    case ampersand:
      jj_consume_token(ampersand);
      jj_consume_token(identificador);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Bloque() throws ParseException {
    jj_consume_token(llaveAbierta);
    SecDec();
    SecInstr();
    jj_consume_token(llaveCerrada);
  }

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case integer:
      jj_consume_token(integer);
      break;
    case real:
      jj_consume_token(real);
      break;
    case bool:
      jj_consume_token(bool);
      break;
    case string:
      jj_consume_token(string);
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    case array:
      Array();
      break;
    case record:
      Registro();
      break;
    case pointer:
      Puntero();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Array() throws ParseException {
    jj_consume_token(array);
    jj_consume_token(corcheteAbierto);
    jj_consume_token(numEnt);
    jj_consume_token(corcheteCerrado);
    jj_consume_token(of);
    Tipo();
  }

  final public void Registro() throws ParseException {
    jj_consume_token(record);
    jj_consume_token(llaveAbierta);
    Campos();
    jj_consume_token(llaveCerrada);
  }

  final public void Campos() throws ParseException {
    Campo();
    CamposAux();
  }

  final public void CamposAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case puntocoma:
      jj_consume_token(puntocoma);
      Campo();
      CamposAux();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  final public void Campo() throws ParseException {
    Tipo();
    jj_consume_token(identificador);
  }

  final public void Puntero() throws ParseException {
    jj_consume_token(pointer);
    Tipo();
  }

  final public void SecInstr() throws ParseException {
    Instruccion();
    SecInstrAux();
  }

  final public void SecInstrAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case puntocoma:
      jj_consume_token(puntocoma);
      Instruccion();
      SecInstrAux();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  final public void Instruccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numEnt:
    case numReal:
    case booleans:
    case parAbierto:
    case resta:
    case mult:
    case not:
    case tnull:
    case cadena:
    case identificador:
      InstruccionAsignacion();
      break;
    case tif:
      InstruccionIf();
      break;
    case twhile:
      InstruccionWhile();
      break;
    case read:
      InstruccionRead();
      break;
    case write:
      InstruccionWrite();
      break;
    case nl:
      jj_consume_token(nl);
      break;
    case tnew:
      InstruccionNew();
      break;
    case delete:
      InstruccionDelete();
      break;
    case call:
      InstruccionCall();
      break;
    case llaveAbierta:
      Bloque();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InstruccionAsignacion() throws ParseException {
    E0();
    jj_consume_token(asignacion);
    E0();
  }

  final public void InstruccionIf() throws ParseException {
    jj_consume_token(tif);
    E0();
    jj_consume_token(then);
    SecInstr2();
    Else();
    jj_consume_token(endif);
  }

  final public void SecInstr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numEnt:
    case numReal:
    case booleans:
    case parAbierto:
    case resta:
    case mult:
    case not:
    case llaveAbierta:
    case tnull:
    case tif:
    case twhile:
    case call:
    case tnew:
    case delete:
    case read:
    case write:
    case nl:
    case cadena:
    case identificador:
      SecInstr();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  final public void Else() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case telse:
      jj_consume_token(telse);
      SecInstr2();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  final public void InstruccionWhile() throws ParseException {
    jj_consume_token(twhile);
    E0();
    jj_consume_token(tdo);
    SecInstr2();
    jj_consume_token(endwhile);
  }

  final public void InstruccionRead() throws ParseException {
    jj_consume_token(read);
    E0();
  }

  final public void InstruccionWrite() throws ParseException {
    jj_consume_token(write);
    E0();
  }

  final public void InstruccionNew() throws ParseException {
    jj_consume_token(tnew);
    E0();
  }

  final public void InstruccionDelete() throws ParseException {
    jj_consume_token(delete);
    E0();
  }

  final public void InstruccionCall() throws ParseException {
    jj_consume_token(call);
    jj_consume_token(identificador);
    jj_consume_token(parAbierto);
    ParametrosReales();
    jj_consume_token(parCerrado);
  }

  final public void ParametrosReales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numEnt:
    case numReal:
    case booleans:
    case parAbierto:
    case resta:
    case mult:
    case not:
    case tnull:
    case cadena:
    case identificador:
      E0();
      ParametrosRealesAux();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  final public void ParametrosRealesAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case coma:
      jj_consume_token(coma);
      E0();
      ParametrosRealesAux();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  final public void ExpresionBasica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numEnt:
      jj_consume_token(numEnt);
      break;
    case numReal:
      jj_consume_token(numReal);
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    case booleans:
      jj_consume_token(booleans);
      break;
    case cadena:
      jj_consume_token(cadena);
      break;
    case tnull:
      jj_consume_token(tnull);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E0() throws ParseException {
    E1();
    E0_AUX();
  }

  final public void E0_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case suma:
      jj_consume_token(suma);
      E0();
      break;
    case resta:
      jj_consume_token(resta);
      E1();
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void E1() throws ParseException {
    E2();
    E1_AUX();
  }

  final public void E1_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
    case or:
      Op1();
      E2();
      E1_AUX();
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    E2_AUX();
  }

  final public void E2_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mayor:
    case menor:
    case mayorIgual:
    case menorIgual:
    case igual:
    case diferente:
      Op2();
      E3();
      E2_AUX();
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    E4();
    E3_AUX();
  }

  final public void E3_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case div:
    case mult:
    case porcentaje:
      Op3();
      E4();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case not:
      jj_consume_token(not);
      E4();
      break;
    case resta:
      jj_consume_token(resta);
      E5();
      break;
    case numEnt:
    case numReal:
    case booleans:
    case parAbierto:
    case mult:
    case tnull:
    case cadena:
    case identificador:
      E5();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E5() throws ParseException {
    E6();
    E5_AUX();
  }

  final public void E5_AUX() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case corcheteAbierto:
    case punto:
    case flecha:
      Op4();
      E5_AUX();
      break;
    default:
      jj_la1[20] = jj_gen;

    }
  }

  final public void E6() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mult:
      jj_consume_token(mult);
      E6();
      break;
    case numEnt:
    case numReal:
    case booleans:
    case parAbierto:
    case tnull:
    case cadena:
    case identificador:
      E7();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numEnt:
    case numReal:
    case booleans:
    case tnull:
    case cadena:
    case identificador:
      ExpresionBasica();
      break;
    case parAbierto:
      jj_consume_token(parAbierto);
      E0();
      jj_consume_token(parCerrado);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      jj_consume_token(and);
      break;
    case or:
      jj_consume_token(or);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menor:
      jj_consume_token(menor);
      break;
    case mayor:
      jj_consume_token(mayor);
      break;
    case menorIgual:
      jj_consume_token(menorIgual);
      break;
    case mayorIgual:
      jj_consume_token(mayorIgual);
      break;
    case diferente:
      jj_consume_token(diferente);
      break;
    case igual:
      jj_consume_token(igual);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mult:
      jj_consume_token(mult);
      break;
    case div:
      jj_consume_token(div);
      break;
    case porcentaje:
      jj_consume_token(porcentaje);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case corcheteAbierto:
      Indexacion();
      break;
    case punto:
    case flecha:
      Acceso_registro();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Indexacion() throws ParseException {
    jj_consume_token(corcheteAbierto);
    E0();
    jj_consume_token(corcheteCerrado);
  }

  final public void Acceso_registro() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case punto:
      jj_consume_token(punto);
      jj_consume_token(identificador);
      break;
    case flecha:
      jj_consume_token(flecha);
      jj_consume_token(identificador);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x10000,0x0,0xe00,0x0,0x0,0xe00,0x10000,0x10000,0x2527000,0x2527000,0x0,0x2527000,0x0,0x7000,0x180000,0x1800000,0xfc000000,0x600000,0x2527000,0x0,0x427000,0x27000,0x1800000,0xfc000000,0x600000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x60000800,0x0,0x60000800,0xb00200,0x80,0x100,0xb00200,0x0,0x0,0x9f091408,0x9f091408,0x4000,0x80000400,0x80,0x80000400,0x0,0x0,0x0,0x1,0x80000400,0x62,0x80000400,0x80000400,0x0,0x0,0x1,0x62,0x60,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintacticoTiny(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                                       }
