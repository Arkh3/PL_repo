
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Mar 26 12:44:34 CET 2022
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Mar 26 12:44:34 CET 2022
  */
public class AnalizadorSintacticoTinyCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTinyCup() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTinyCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTinyCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\007\005\000\002\010\010\000\002" +
    "\011\003\000\002\011\002\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\005\000\002\014\006" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\010\000\002\017" +
    "\006\000\002\020\005\000\002\020\003\000\002\021\004" +
    "\000\002\022\004\000\002\023\005\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\026\005\000\002\027\007\000" +
    "\002\030\003\000\002\030\002\000\002\031\011\000\002" +
    "\032\007\000\002\033\004\000\002\034\004\000\002\035" +
    "\004\000\002\036\004\000\002\025\007\000\002\037\003" +
    "\000\002\037\002\000\002\040\005\000\002\040\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\005" +
    "\000\002\043\003\000\002\044\005\000\002\044\003\000" +
    "\002\045\005\000\002\045\003\000\002\046\004\000\002" +
    "\046\004\000\002\046\003\000\002\047\004\000\002\047" +
    "\003\000\002\050\004\000\002\050\003\000\002\051\003" +
    "\000\002\051\005\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\055\003" +
    "\000\002\055\003\000\002\056\005\000\002\057\004\000" +
    "\002\057\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\056\004\ufffe\006\013\007\012\012\010\013" +
    "\ufffe\014\ufffe\020\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\052\ufffe\054\ufffe\055\ufffe\057\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\074\ufffe\001\002\000\006" +
    "\010\244\011\245\001\002\000\050\004\115\013\071\014" +
    "\106\020\061\035\104\036\072\037\111\040\113\041\077" +
    "\052\065\054\105\055\075\057\117\064\116\065\070\066" +
    "\100\067\067\070\074\074\101\001\002\000\004\002\242" +
    "\001\002\000\006\010\ufff9\011\ufff9\001\002\000\022\013" +
    "\031\022\016\023\027\024\020\025\025\026\022\027\024" +
    "\030\026\001\002\000\006\010\ufffb\011\ufffb\001\002\000" +
    "\004\013\051\001\002\000\022\013\031\022\016\023\027" +
    "\024\020\025\025\026\022\027\024\030\026\001\002\000" +
    "\006\010\ufffa\011\ufffa\001\002\000\006\010\ufffc\011\ufffc" +
    "\001\002\000\006\013\uffee\017\uffee\001\002\000\004\013" +
    "\050\001\002\000\006\013\uffec\017\uffec\001\002\000\006" +
    "\013\uffe8\017\uffe8\001\002\000\004\031\043\001\002\000" +
    "\006\013\uffe9\017\uffe9\001\002\000\004\020\033\001\002" +
    "\000\006\013\uffeb\017\uffeb\001\002\000\022\013\031\022" +
    "\016\023\027\024\020\025\025\026\022\027\024\030\026" +
    "\001\002\000\006\013\uffed\017\uffed\001\002\000\006\013" +
    "\uffe7\017\uffe7\001\002\000\006\013\uffea\017\uffea\001\002" +
    "\000\006\013\uffe1\017\uffe1\001\002\000\022\013\031\022" +
    "\016\023\027\024\020\025\025\026\022\027\024\030\026" +
    "\001\002\000\004\013\042\001\002\000\006\011\040\021" +
    "\037\001\002\000\006\011\uffe3\021\uffe3\001\002\000\006" +
    "\013\uffe5\017\uffe5\001\002\000\022\013\031\022\016\023" +
    "\027\024\020\025\025\026\022\027\024\030\026\001\002" +
    "\000\006\011\uffe4\021\uffe4\001\002\000\006\011\uffe2\021" +
    "\uffe2\001\002\000\004\037\044\001\002\000\004\032\045" +
    "\001\002\000\004\005\046\001\002\000\022\013\031\022" +
    "\016\023\027\024\020\025\025\026\022\027\024\030\026" +
    "\001\002\000\006\013\uffe6\017\uffe6\001\002\000\006\010" +
    "\ufff7\011\ufff7\001\002\000\004\014\052\001\002\000\024" +
    "\013\031\015\ufff4\022\016\023\027\024\020\025\025\026" +
    "\022\027\024\030\026\001\002\000\006\013\236\017\235" +
    "\001\002\000\006\015\ufff2\016\ufff2\001\002\000\006\015" +
    "\ufff5\016\233\001\002\000\004\015\057\001\002\000\004" +
    "\020\061\001\002\000\006\010\ufff6\011\ufff6\001\002\000" +
    "\056\004\ufffe\006\013\007\012\012\010\013\ufffe\014\ufffe" +
    "\020\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\052" +
    "\ufffe\054\ufffe\055\ufffe\057\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\074\ufffe\001\002\000\050\004\115\013" +
    "\071\014\106\020\061\035\104\036\072\037\111\040\113" +
    "\041\077\052\065\054\105\055\075\057\117\064\116\065" +
    "\070\066\100\067\067\070\074\074\101\001\002\000\016" +
    "\002\uffdd\011\uffdd\021\uffdd\056\uffdd\060\uffdd\061\uffdd\001" +
    "\002\000\016\002\uffd9\011\uffd9\021\uffd9\056\uffd9\060\uffd9" +
    "\061\uffd9\001\002\000\022\013\071\014\106\037\111\040" +
    "\113\041\077\052\065\054\105\074\101\001\002\000\016" +
    "\002\uffd7\011\uffd7\021\uffd7\056\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\026\013\071\014\106\035\104\036\072\037\111" +
    "\040\113\041\077\052\065\054\105\074\101\001\002\000" +
    "\026\013\071\014\106\035\104\036\072\037\111\040\113" +
    "\041\077\052\065\054\105\074\101\001\002\000\072\002" +
    "\uffc2\011\uffc2\015\uffc2\016\uffc2\021\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\001\002\000\026\013\071\014\106\035\104" +
    "\036\072\037\111\040\113\041\077\052\065\054\105\074" +
    "\101\001\002\000\016\002\uffd5\011\uffd5\021\uffd5\056\uffd5" +
    "\060\uffd5\061\uffd5\001\002\000\004\013\217\001\002\000" +
    "\026\013\071\014\106\035\104\036\072\037\111\040\113" +
    "\041\077\052\065\054\105\074\101\001\002\000\016\002" +
    "\uffdf\011\uffdf\021\uffdf\056\uffdf\060\uffdf\061\uffdf\001\002" +
    "\000\072\002\uffc1\011\uffc1\015\uffc1\016\uffc1\021\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\001\002\000\026\013\071\014" +
    "\106\035\104\036\072\037\111\040\113\041\077\052\065" +
    "\054\105\074\101\001\002\000\072\002\uffc0\011\uffc0\015" +
    "\uffc0\016\uffc0\021\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\056\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\071\uffc0\072\uffc0\073\uffc0\001" +
    "\002\000\072\002\uffae\011\uffae\015\uffae\016\uffae\021\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\056\uffae\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\071\uffae\072\uffae\073\uffae\001\002\000\016\002\uffdb" +
    "\011\uffdb\021\uffdb\056\uffdb\060\uffdb\061\uffdb\001\002\000" +
    "\022\013\071\014\106\037\111\040\113\041\077\052\065" +
    "\054\105\074\101\001\002\000\072\002\uffbf\011\uffbf\015" +
    "\uffbf\016\uffbf\021\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\056\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\071\uffbf\072\uffbf\073\uffbf\001" +
    "\002\000\026\013\071\014\106\035\104\036\072\037\111" +
    "\040\113\041\077\052\065\054\105\074\101\001\002\000" +
    "\016\002\uffdc\011\uffdc\021\uffdc\056\uffdc\060\uffdc\061\uffdc" +
    "\001\002\000\006\011\177\021\203\001\002\000\072\002" +
    "\uffc4\011\uffc4\015\uffc4\016\uffc4\021\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\056\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\071\uffc4\072" +
    "\uffc4\073\uffc4\001\002\000\016\002\uffda\011\uffda\021\uffda" +
    "\056\uffda\060\uffda\061\uffda\001\002\000\072\002\uffc3\011" +
    "\uffc3\015\uffc3\016\uffc3\021\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\056\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\001\002\000\016\002\uffd4\011\uffd4\021\uffd4\056\uffd4" +
    "\060\uffd4\061\uffd4\001\002\000\016\002\uffd8\011\uffd8\021" +
    "\uffd8\056\uffd8\060\uffd8\061\uffd8\001\002\000\026\013\071" +
    "\014\106\035\104\036\072\037\111\040\113\041\077\052" +
    "\065\054\105\074\101\001\002\000\026\013\071\014\106" +
    "\035\104\036\072\037\111\040\113\041\077\052\065\054" +
    "\105\074\101\001\002\000\016\002\uffd6\011\uffd6\021\uffd6" +
    "\056\uffd6\060\uffd6\061\uffd6\001\002\000\072\002\uffaf\011" +
    "\uffaf\015\uffaf\016\uffaf\021\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\056\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\063\uffaf\071\uffaf\072\uffaf\073" +
    "\uffaf\001\002\000\072\002\uffb1\011\uffb1\015\uffb1\016\uffb1" +
    "\021\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\056\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\071\uffb1\072\uffb1\073\uffb1\001\002\000\016" +
    "\002\uffde\011\uffde\021\uffde\056\uffde\060\uffde\061\uffde\001" +
    "\002\000\072\002\uffb3\011\uffb3\015\uffb3\016\uffb3\021\uffb3" +
    "\031\163\032\uffb3\033\uffb3\034\uffb3\035\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\071\uffb3\072\162\073\161\001\002\000\064\002\uffb6" +
    "\011\uffb6\015\uffb6\016\uffb6\021\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\154\053\156\056\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\071\155\001\002\000\056" +
    "\002\uffb8\011\uffb8\015\uffb8\016\uffb8\021\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\056\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\001\002\000\056\002\uffba\011\uffba" +
    "\015\uffba\016\uffba\021\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\042\uffba\043\uffba\044\147\045\150\046\151\047\152" +
    "\050\146\051\145\056\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\001\002\000\042\002\uffbc\011\uffbc\015\uffbc\016\uffbc" +
    "\021\uffbc\032\uffbc\033\uffbc\034\135\035\137\042\136\043" +
    "\140\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002" +
    "\000\004\033\132\001\002\000\026\013\071\014\106\035" +
    "\104\036\072\037\111\040\113\041\077\052\065\054\105" +
    "\074\101\001\002\000\016\002\uffd3\011\uffd3\021\uffd3\056" +
    "\uffd3\060\uffd3\061\uffd3\001\002\000\026\013\071\014\106" +
    "\035\104\036\072\037\111\040\113\041\077\052\065\054" +
    "\105\074\101\001\002\000\026\013\071\014\106\035\104" +
    "\036\072\037\111\040\113\041\077\052\065\054\105\074" +
    "\101\001\002\000\026\013\uffac\014\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\052\uffac\054\uffac\074\uffac\001" +
    "\002\000\026\013\071\014\106\035\104\036\072\037\111" +
    "\040\113\041\077\052\065\054\105\074\101\001\002\000" +
    "\026\013\uffab\014\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\052\uffab\054\uffab\074\uffab\001\002\000\036\002" +
    "\uffbd\011\uffbd\015\uffbd\016\uffbd\021\uffbd\032\uffbd\033\uffbd" +
    "\042\136\043\140\056\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\001\002\000\032\002\uffbe\011\uffbe\015\uffbe\016\uffbe" +
    "\021\uffbe\032\uffbe\033\uffbe\056\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\001\002\000\056\002\uffbb\011\uffbb\015\uffbb" +
    "\016\uffbb\021\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\042" +
    "\uffbb\043\uffbb\044\147\045\150\046\151\047\152\050\146" +
    "\051\145\056\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\001" +
    "\002\000\026\013\071\014\106\035\104\036\072\037\111" +
    "\040\113\041\077\052\065\054\105\074\101\001\002\000" +
    "\026\013\uffa5\014\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\052\uffa5\054\uffa5\074\uffa5\001\002\000\026\013" +
    "\uffa6\014\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\052\uffa6\054\uffa6\074\uffa6\001\002\000\026\013\uffaa\014" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\052\uffaa" +
    "\054\uffaa\074\uffaa\001\002\000\026\013\uffa9\014\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\052\uffa9\054\uffa9" +
    "\074\uffa9\001\002\000\026\013\uffa8\014\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\052\uffa8\054\uffa8\074\uffa8" +
    "\001\002\000\026\013\uffa7\014\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\052\uffa7\054\uffa7\074\uffa7\001\002" +
    "\000\056\002\uffb9\011\uffb9\015\uffb9\016\uffb9\021\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\056\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000\026\013\uffa4" +
    "\014\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\052" +
    "\uffa4\054\uffa4\074\uffa4\001\002\000\026\013\uffa2\014\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\052\uffa2\054" +
    "\uffa2\074\uffa2\001\002\000\026\013\uffa3\014\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\052\uffa3\054\uffa3\074" +
    "\uffa3\001\002\000\026\013\071\014\106\035\104\036\072" +
    "\037\111\040\113\041\077\052\065\054\105\074\101\001" +
    "\002\000\056\002\uffb7\011\uffb7\015\uffb7\016\uffb7\021\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\056\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002\000\004\013" +
    "\172\001\002\000\004\013\171\001\002\000\026\013\071" +
    "\014\106\035\104\036\072\037\111\040\113\041\077\052" +
    "\065\054\105\074\101\001\002\000\072\002\uffa0\011\uffa0" +
    "\015\uffa0\016\uffa0\021\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\056\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\001\002\000\072\002\uffa1\011\uffa1\015\uffa1\016\uffa1\021" +
    "\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\056\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\071\uffa1\072\uffa1\073\uffa1\001\002\000\072\002" +
    "\uffb2\011\uffb2\015\uffb2\016\uffb2\021\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\001\002\000\004\032\170\001\002\000\072" +
    "\002\uff9f\011\uff9f\015\uff9f\016\uff9f\021\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\056\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\071\uff9f" +
    "\072\uff9f\073\uff9f\001\002\000\072\002\uff9e\011\uff9e\015" +
    "\uff9e\016\uff9e\021\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\056\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\071\uff9e\072\uff9e\073\uff9e\001" +
    "\002\000\072\002\uff9d\011\uff9d\015\uff9d\016\uff9d\021\uff9d" +
    "\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\056\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\001\002\000\004\062\174" +
    "\001\002\000\052\004\115\013\071\014\106\020\061\035" +
    "\104\036\072\037\111\040\113\041\077\052\065\054\105" +
    "\055\075\057\117\061\uffd0\064\116\065\070\066\100\067" +
    "\067\070\074\074\101\001\002\000\004\061\201\001\002" +
    "\000\012\011\177\056\uffd1\060\uffd1\061\uffd1\001\002\000" +
    "\050\004\115\013\071\014\106\020\061\035\104\036\072" +
    "\037\111\040\113\041\077\052\065\054\105\055\075\057" +
    "\117\064\116\065\070\066\100\067\067\070\074\074\101" +
    "\001\002\000\016\002\uffe0\011\uffe0\021\uffe0\056\uffe0\060" +
    "\uffe0\061\uffe0\001\002\000\016\002\uffce\011\uffce\021\uffce" +
    "\056\uffce\060\uffce\061\uffce\001\002\000\016\002\uffcd\011" +
    "\uffcd\021\uffcd\056\uffcd\060\uffcd\061\uffcd\001\002\000\020" +
    "\002\uffef\010\uffef\011\uffef\021\uffef\056\uffef\060\uffef\061" +
    "\uffef\001\002\000\004\015\205\001\002\000\072\002\uffad" +
    "\011\uffad\015\uffad\016\uffad\021\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\056" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\071\uffad\072\uffad" +
    "\073\uffad\001\002\000\072\002\uffb4\011\uffb4\015\uffb4\016" +
    "\uffb4\021\uffb4\031\163\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\056\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\071\uffb4\072\162\073\161\001\002\000" +
    "\016\002\uffcb\011\uffcb\021\uffcb\056\uffcb\060\uffcb\061\uffcb" +
    "\001\002\000\004\063\211\001\002\000\054\004\115\013" +
    "\071\014\106\020\061\035\104\036\072\037\111\040\113" +
    "\041\077\052\065\054\105\055\075\056\uffd0\057\117\060" +
    "\uffd0\064\116\065\070\066\100\067\067\070\074\074\101" +
    "\001\002\000\006\056\213\060\214\001\002\000\052\004" +
    "\115\013\071\014\106\020\061\035\104\036\072\037\111" +
    "\040\113\041\077\052\065\054\105\055\075\057\117\060" +
    "\uffd0\064\116\065\070\066\100\067\067\070\074\074\101" +
    "\001\002\000\016\002\uffd2\011\uffd2\021\uffd2\056\uffd2\060" +
    "\uffd2\061\uffd2\001\002\000\004\060\216\001\002\000\016" +
    "\002\uffcf\011\uffcf\021\uffcf\056\uffcf\060\uffcf\061\uffcf\001" +
    "\002\000\004\014\220\001\002\000\030\013\071\014\106" +
    "\015\uffc7\035\104\036\072\037\111\040\113\041\077\052" +
    "\065\054\105\074\101\001\002\000\006\015\uffc8\016\225" +
    "\001\002\000\006\015\uffc5\016\uffc5\001\002\000\004\015" +
    "\224\001\002\000\016\002\uffc9\011\uffc9\021\uffc9\056\uffc9" +
    "\060\uffc9\061\uffc9\001\002\000\026\013\071\014\106\035" +
    "\104\036\072\037\111\040\113\041\077\052\065\054\105" +
    "\074\101\001\002\000\006\015\uffc6\016\uffc6\001\002\000" +
    "\064\002\uffb5\011\uffb5\015\uffb5\016\uffb5\021\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\056\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\071\uffb5\001" +
    "\002\000\016\002\uffcc\011\uffcc\021\uffcc\056\uffcc\060\uffcc" +
    "\061\uffcc\001\002\000\016\002\uffca\011\uffca\021\uffca\056" +
    "\uffca\060\uffca\061\uffca\001\002\000\072\002\uffb0\011\uffb0" +
    "\015\uffb0\016\uffb0\021\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\056\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\001\002\000\022\013\031\022\016\023\027\024\020\025" +
    "\025\026\022\027\024\030\026\001\002\000\006\015\ufff3" +
    "\016\ufff3\001\002\000\004\013\237\001\002\000\006\015" +
    "\ufff1\016\ufff1\001\002\000\006\015\ufff0\016\ufff0\001\002" +
    "\000\004\013\241\001\002\000\006\010\ufff8\011\ufff8\001" +
    "\002\000\004\002\000\001\002\000\006\002\001\011\177" +
    "\001\002\000\050\004\uffff\013\uffff\014\uffff\020\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\052\uffff\054\uffff" +
    "\055\uffff\057\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070" +
    "\uffff\074\uffff\001\002\000\010\006\013\007\012\012\010" +
    "\001\002\000\006\010\ufffd\011\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\020\002\005\003\004\004\003\005\014\006" +
    "\010\007\013\010\006\001\001\000\002\001\001\000\054" +
    "\014\113\023\242\024\075\025\072\026\122\027\062\031" +
    "\106\032\102\033\111\034\063\035\065\036\117\041\101" +
    "\042\130\043\127\044\126\045\125\046\124\047\123\050" +
    "\121\051\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\237\016\022\017\020\022\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\016\016\022" +
    "\017\020\022\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\031\016\022" +
    "\017\020\022\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\033" +
    "\016\022\017\020\020\034\021\035\022\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\033\016\022\017\020\021\040\022" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\046\016\022\017\020\022\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\055\012" +
    "\054\013\053\015\052\016\022\017\020\022\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\057\001\001\000\002\001\001" +
    "\000\016\003\061\004\003\005\014\006\010\007\013\010" +
    "\006\001\001\000\054\014\113\023\107\024\075\025\072" +
    "\026\122\027\062\031\106\032\102\033\111\034\063\035" +
    "\065\036\117\041\101\042\130\043\127\044\126\045\125" +
    "\046\124\047\123\050\121\051\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\041\101\050\231\051\120" +
    "\001\001\000\002\001\001\000\024\041\101\042\230\043" +
    "\127\044\126\045\125\046\124\047\123\050\121\051\120" +
    "\001\001\000\024\041\101\042\227\043\127\044\126\045" +
    "\125\046\124\047\123\050\121\051\120\001\001\000\002" +
    "\001\001\000\014\041\101\046\226\047\123\050\121\051" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\101\042\207\043\127\044\126\045\125\046\124\047" +
    "\123\050\121\051\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\041\101\042\206\043\127\044\126\045" +
    "\125\046\124\047\123\050\121\051\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\101\047\205\050\121\051\120\001\001\000\002\001\001" +
    "\000\024\041\101\042\203\043\127\044\126\045\125\046" +
    "\124\047\123\050\121\051\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\101\042\201\043\127\044\126\045\125\046\124\047" +
    "\123\050\121\051\120\001\001\000\024\041\101\042\172" +
    "\043\127\044\126\045\125\046\124\047\123\050\121\051" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\055\165\056\164\057" +
    "\163\001\001\000\004\054\156\001\001\000\002\001\001" +
    "\000\004\053\143\001\001\000\004\052\133\001\001\000" +
    "\002\001\001\000\024\041\101\042\132\043\127\044\126" +
    "\045\125\046\124\047\123\050\121\051\120\001\001\000" +
    "\002\001\001\000\020\041\101\044\142\045\125\046\124" +
    "\047\123\050\121\051\120\001\001\000\024\041\101\042" +
    "\141\043\127\044\126\045\125\046\124\047\123\050\121" +
    "\051\120\001\001\000\002\001\001\000\022\041\101\043" +
    "\140\044\126\045\125\046\124\047\123\050\121\051\120" +
    "\001\001\000\002\001\001\000\004\052\133\001\001\000" +
    "\002\001\001\000\004\053\143\001\001\000\016\041\101" +
    "\045\152\046\124\047\123\050\121\051\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\041\101\046\157\047\123\050\121\051\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\041\101\042\166\043\127\044\126\045\125\046" +
    "\124\047\123\050\121\051\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\014\113\023\175\024\075\025\072\026" +
    "\122\027\062\030\174\031\106\032\102\033\111\034\063" +
    "\035\065\036\117\041\101\042\130\043\127\044\126\045" +
    "\125\046\124\047\123\050\121\051\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\014\113\024\177\025" +
    "\072\026\122\027\062\031\106\032\102\033\111\034\063" +
    "\035\065\036\117\041\101\042\130\043\127\044\126\045" +
    "\125\046\124\047\123\050\121\051\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\055\165" +
    "\056\164\057\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\014\113\023\175\024\075\025\072\026\122" +
    "\027\062\030\211\031\106\032\102\033\111\034\063\035" +
    "\065\036\117\041\101\042\130\043\127\044\126\045\125" +
    "\046\124\047\123\050\121\051\120\001\001\000\002\001" +
    "\001\000\056\014\113\023\175\024\075\025\072\026\122" +
    "\027\062\030\214\031\106\032\102\033\111\034\063\035" +
    "\065\036\117\041\101\042\130\043\127\044\126\045\125" +
    "\046\124\047\123\050\121\051\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\037\222\040\220\041\101\042\221\043\127\044" +
    "\126\045\125\046\124\047\123\050\121\051\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\041\101\042\225\043\127\044\126" +
    "\045\125\046\124\047\123\050\121\051\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\233\015\052\016" +
    "\022\017\020\022\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\245\006\010\007\013\010" +
    "\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTinyCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTinyCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTinyCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTinyCup$actions {
  private final AnalizadorSintacticoTinyCup parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTinyCup$actions(AnalizadorSintacticoTinyCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTinyCup$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTinyCup$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTinyCup$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTinyCup$stack,
    int                        CUP$AnalizadorSintacticoTinyCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTinyCup$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTinyCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= SecDec SecInstr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyCup$stack.elementAt(CUP$AnalizadorSintacticoTinyCup$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTinyCup$parser.done_parsing();
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SecDec ::= Declaraciones SEPARADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("SecDec",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SecDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("SecDec",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaraciones PUNTOCOMA Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaraciones ::= Declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= DeclaracionVar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= DeclaracionTipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= DeclaracionProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Declaracion",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionVar ::= VAR Tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionTipo ::= TYPE Tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("DeclaracionTipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclaracionProc ::= PROC IDENTIFICADOR PAR_ABIERTO ParametrosFormales PAR_CERRADO Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("DeclaracionProc",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ParametrosFormales ::= ParametrosFormalesAux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ParametrosFormales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosFormales",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParametrosFormalesAux ::= ParametrosFormalesAux COMA Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosFormalesAux",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ParametrosFormalesAux ::= Parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosFormalesAux",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parametro ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Parametro",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parametro ::= Tipo AMPERSAND IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Parametro",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Bloque ::= LLAVE_ABIERTA SecDec SecInstr LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Bloque",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= Array 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= Registro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= Puntero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Array ::= ARRAY CORCHETE_ABIERTO NUM_ENT CORCHETE_CERRADO OF Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Array",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Registro ::= RECORD LLAVE_ABIERTA Campos LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Registro",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Campos ::= Campos PUNTOCOMA Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Campos ::= Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Campos",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Campo ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Campo",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Puntero ::= POINTER Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Puntero",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SecInstr ::= SecInstr PUNTOCOMA Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("SecInstr",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SecInstr ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("SecInstr",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= InstruccionAsignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= InstruccionIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= InstruccionIfElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= InstruccionWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= InstruccionRead 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= InstruccionWrite 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion ::= InstruccionNew 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion ::= InstruccionDelete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion ::= InstruccionCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruccion ::= Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Instruccion",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InstruccionAsignacion ::= E0 ASIGNACION E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionAsignacion",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InstruccionIf ::= IF E0 THEN SecInstr2 ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionIf",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SecInstr2 ::= SecInstr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("SecInstr2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SecInstr2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("SecInstr2",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InstruccionIfElse ::= IF E0 THEN SecInstr2 ELSE SecInstr2 ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionIfElse",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InstruccionWhile ::= WHILE E0 DO SecInstr2 ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionWhile",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InstruccionRead ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionRead",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstruccionWrite ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionWrite",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InstruccionNew ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionNew",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InstruccionDelete ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionDelete",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InstruccionCall ::= CALL IDENTIFICADOR PAR_ABIERTO ParametrosReales PAR_CERRADO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("InstruccionCall",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ParametrosReales ::= ParametrosRealesAux 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosReales",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ParametrosReales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosReales",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ParametrosRealesAux ::= ParametrosRealesAux COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosRealesAux",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ParametrosRealesAux ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ParametrosRealesAux",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpresionBasica ::= NUM_ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpresionBasica ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpresionBasica ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpresionBasica ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpresionBasica ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpresionBasica ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("ExpresionBasica",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E0",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E0",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E0",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E1 Op1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E1",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E1",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E2 Op2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E2",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= E4 Op3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E3",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E3",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E4",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E4",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E4",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= E5 Op4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E5",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E5",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= MULT E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E6",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E6",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= ExpresionBasica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E7",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E7 ::= PAR_ABIERTO E0 PAR_CERRADO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("E7",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Op1 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op1",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Op1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op1",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Op2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Op2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Op2 ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Op2 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Op2 ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Op2 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op2",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Op3 ::= MULT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op3",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Op3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op3",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Op3 ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op3",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Op4 ::= Indexacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op4",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Op4 ::= Acceso_registro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Op4",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Indexacion ::= CORCHETE_ABIERTO E0 CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Indexacion",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Acceso_registro ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Acceso_registro",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Acceso_registro ::= FLECHA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTinyCup$result = parser.getSymbolFactory().newSymbol("Acceso_registro",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTinyCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTinyCup$do_action(
    int                        CUP$AnalizadorSintacticoTinyCup$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTinyCup$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTinyCup$stack,
    int                        CUP$AnalizadorSintacticoTinyCup$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTinyCup$do_action_part00000000(
                               CUP$AnalizadorSintacticoTinyCup$act_num,
                               CUP$AnalizadorSintacticoTinyCup$parser,
                               CUP$AnalizadorSintacticoTinyCup$stack,
                               CUP$AnalizadorSintacticoTinyCup$top);
    }
}

